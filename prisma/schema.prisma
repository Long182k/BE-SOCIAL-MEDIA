generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @default(uuid())
  userName              String            @unique
  email                 String            @unique
  role                  Role              @default(USER)
  displayName           String?
  hashedPassword        String
  hashedRefreshToken    String?
  avatarUrl             String?
  bio                   String?
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  bookmarks             Bookmark[]
  comments              Comment[]
  following             Follow[]          @relation("Following")
  followers             Follow[]          @relation("Followers")
  likes                 Like[]
  issuedNotifications   Notification[]    @relation("Issuer")
  receivedNotifications Notification[]    @relation("Recipient")
  posts                 Post[]
  ChatParticipant       ChatParticipant[]
  ChatMessage           ChatMessage[]
  ChatRoom              ChatRoom[]

  @@map("users")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId], map: "follows_followingId_fkey")
  @@map("follows")
}

model Post {
  id                  String         @id @default(uuid())
  content             String         @db.Text
  userId              String
  createdAt           DateTime       @default(now())
  bookmarks           Bookmark[]
  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "posts_userId_fkey")
  @@map("posts")
}

model Media {
  id        String    @id @default(uuid())
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId], map: "post_media_postId_fkey")
  @@map("post_media")
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId], map: "comments_postId_fkey")
  @@index([userId], map: "comments_userId_fkey")
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId], map: "likes_postId_fkey")
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId], map: "bookmarks_postId_fkey")
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(uuid())
  recipientId String
  issuerId    String
  postId      String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([issuerId], map: "notifications_issuerId_fkey")
  @@index([postId], map: "notifications_postId_fkey")
  @@index([recipientId], map: "notifications_recipientId_fkey")
  @@map("notifications")
}

model ChatRoom {
  id           String            @id @default(cuid())
  name         String
  type         ChatRoomType      @default(DIRECT)
  creatorId    String
  participants ChatParticipant[]
  messages     ChatMessage[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  User         User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?

  @@index([creatorId])
}

model ChatParticipant {
  id         String   @id @default(cuid())
  userId     String
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  joinedAt   DateTime @default(now())

  @@unique([userId, chatRoomId])
  @@index([userId])
  @@index([chatRoomId])
}

model ChatMessage {
  id          String           @id @default(cuid())
  content     String           @db.Text
  type        String           @default("MESSAGE")
  senderId    String
  receiverId  String
  chatRoomId  String
  user        User             @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatRoom    ChatRoom         @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  attachments ChatAttachment[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([senderId])
  @@index([chatRoomId])
}

model ChatAttachment {
  id        String             @id @default(cuid())
  type      ChatAttachmentType @default(image)
  url       String
  messageId String
  message   ChatMessage        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())

  @@index([messageId])
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

enum MediaType {
  image
  video
}

enum Role {
  ADMIN
  USER
}

enum ChatRoomType {
  DIRECT
  GROUP
}

enum ChatAttachmentType {
  image
  video
}
